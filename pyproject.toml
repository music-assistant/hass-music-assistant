[project]
authors = [
  {name = "The Music Assistant Authors", email = "marcelveldt@users.noreply.github.com"},
]
classifiers = [
  "Environment :: Console",
  "Programming Language :: Python :: 3.12",
]
dependencies = [
  "async_timeout",
  "homeassistant",
  "music-assistant-client",
]
description = "Music Assistant Home Assistant Integration"
license = {text = "Apache-2.0"}
name = "mass"
readme = "README.md"
requires-python = ">=3.12"
version = "0.0.0"

[project.optional-dependencies]
test = [
  "aiofiles",
  "codespell==2.3.0",
  "mypy==1.13.0",
  "pre-commit==4.0.1",
  "pre-commit-hooks==5.0.0",
  "pylint==3.3.2",
  "ruff==0.8.1",
  "tomli==2.2.1",
  "pytest-homeassistant-custom-component==0.13.190",
  "zeroconf",
]

[tool.codespell]
ignore-words-list = "provid,hass,followings"

[tool.setuptools]
include-package-data = true
platforms = ["any"]
zip-safe = false

[tool.setuptools.packages.find]
include = ["custom_components*"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = false # TEMPORARY DISABLED
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
platform = "linux"
python_version = "3.11"
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MAIN]
extension-pkg-allow-list = [
  "chip.*",
  "orjson",
]

[tool.pylint.BASIC]
good-names = [
  "_",
  "T",
]

[tool.pylint.DESIGN]
max-args = 10
max-attributes = 25
max-branches = 25

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "duplicate-code", # unavoidable
  "format", # unavoidable
  "unsubscriptable-object", # unavoidable
  "unused-argument", # handled by ruff
  "unspecified-encoding", # handled by ruff
  "isinstance-second-argument-not-valid-type", # conflict with ruff
  "fixme", # we're still developing
  "too-few-public-methods", # unavoidable
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff]
fix = true
line-length = 88
show-fixes = true
target-version = "py311"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint]
ignore = [
  "ANN002", # Just annoying, not really useful
  "ANN003", # Just annoying, not really useful
  "ANN101", # Self... explanatory
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "FIX002", # Just annoying, not really useful
  "PLR2004", # Just annoying, not really useful
  "PD011", # Just annoying, not really useful
  "S101", # assert is often used to satisfy type checking
  "TD002", # Just annoying, not really useful
  "TD003", # Just annoying, not really useful
  "TD004", # Just annoying, not really useful
  "COM812", # Conflict with the Ruff formatter
  "ISC001", # Conflict with the Ruff formatter
  "I001", # TEMPORARY DISABLED
  "TCH003", # TEMPORARY DISABLED
  "UP035", # TEMPORARY DISABLED
  "TCH002", # TEMPORARY DISABLED
  "TID252", # TEMPORARY DISABLED
  "N805", # TEMPORARY DISABLED
  "EXE002", # TEMPORARY DISABLED
  "T201", # TEMPORARY DISABLED
  "ANN201", # TEMPORARY DISABLED
  "UP032", # TEMPORARY DISABLED
  "E711", # TEMPORARY DISABLED
  "E501", # TEMPORARY DISABLED
  "D104", # TEMPORARY DISABLED
  "B018", # TEMPORARY DISABLED
  "FBT003", # TEMPORARY DISABLED
  "PT012", # TEMPORARY DISABLED
  "UP007", # TEMPORARY DISABLED
  "D400", # TEMPORARY DISABLED
  "D204", # TEMPORARY DISABLED
  "PLW2901", # TEMPORARY DISABLED
  "RET507", # TEMPORARY DISABLED
  "INP001", # TEMPORARY DISABLED
  "ARG001", # TEMPORARY DISABLED
  "RUF006", # TEMPORARY DISABLED
  "SIM108", # TEMPORARY DISABLED
  "ANN001", # TEMPORARY DISABLED
  "SIM117", # TEMPORARY DISABLED
  "TRY003", # TEMPORARY DISABLED
  "UP037", # TEMPORARY DISABLED
  "UP006", # TEMPORARY DISABLED
  "UP041", # TEMPORARY DISABLED
  "D202", # TEMPORARY DISABLED
  "FBT002", # TEMPORARY DISABLED
  "FBT001", # TEMPORARY DISABLED
  "PTH123", # TEMPORARY DISABLED
  "ANN204", # TEMPORARY DISABLED
  "EM102", # TEMPORARY DISABLED
  "PLR0915", # TEMPORARY DISABLED
  "EM101", # TEMPORARY DISABLED
  "EM102", # TEMPORARY DISABLED
  "ERA001", # TEMPORARY DISABLED
  "PYI036", # TEMPORARY DISABLED
  "ANN204", # TEMPORARY DISABLED
  "N818", # TEMPORARY DISABLED
  "N815", # TEMPORARY DISABLED
  "N801", # TEMPORARY DISABLED
  "N813", # TEMPORARY DISABLED
  "RUF012", # TEMPORARY DISABLED
  "TCH001", # TEMPORARY DISABLED
  "ANN102", # TEMPORARY DISABLED
  "RSE102", # TEMPORARY DISABLED
  "B007", # TEMPORARY DISABLED
  "SIM102", # TEMPORARY DISABLED
  "C901", # TEMPORARY DISABLED
  "PLR0911", # TEMPORARY DISABLED
  "PLR0912", # TEMPORARY DISABLED
  "SLF001", # TEMPORARY DISABLED
  "RUF010", # TEMPORARY DISABLED
  "TRY300", # TEMPORARY DISABLED
  "UP038", # TEMPORARY DISABLED
  "PTH118", # TEMPORARY DISABLED
  "PTH112", # TEMPORARY DISABLED
  "PTH102", # TEMPORARY DISABLED
  "TRY400", # TEMPORARY DISABLED
  "DTZ001", # TEMPORARY DISABLED
  "TRY201", # TEMPORARY DISABLED
  "A002", # TEMPORARY DISABLED
  "DTZ003", # TEMPORARY DISABLED
  "N803", # TEMPORARY DISABLED
  "ARG002", # TEMPORARY DISABLED
  "S104", # TEMPORARY DISABLED
  "UP015", # TEMPORARY DISABLED
  "PTH113", # TEMPORARY DISABLED
  "PTH107", # TEMPORARY DISABLED
  "PTH104", # TEMPORARY DISABLED
  "BLE001", # TEMPORARY DISABLED
  "ANN205", # TEMPORARY DISABLED
]

select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["custom_components.mass"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 25
max-returns = 15
max-statements = 50
